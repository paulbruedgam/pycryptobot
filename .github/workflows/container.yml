name: Container

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
      - beta
      - docker*

    # Publish `v1.2.3` tags as releases.
    tags:
      - '**' # All tags kick off a new container build

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: pycryptobot
  # Enable Docker Buildkit
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile-github

  prepare:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: lint
    # Map a step output to a job output
    outputs:
      IMAGE_ID: ${{ steps.tag_image.outputs.IMAGE_ID }}
      VERSION: ${{ steps.tag_image.outputs.VERSION }}

    steps:
      - uses: actions/checkout@v2

      - name: Tag Image
        id: tag_image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo '::set-output name=IMAGE_ID::'$IMAGE_ID
          echo '::set-output name=VERSION::'$VERSION

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage1:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: prepare

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage1 \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,mode=max,dest=/tmp/.buildx-cache-new" \
          --build-arg REPO=${{ github.repository }} \
          --platform linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64 \
          --output "type=image,push=false" \
          --file Dockerfile-github .

      # https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage2:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage1]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage2 \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,mode=max,dest=/tmp/.buildx-cache-new" \
          --build-arg REPO=${{ github.repository }} \
          --platform linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64 \
          --output "type=image,push=false" \
          --file Dockerfile-github .

      # https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage3:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage2]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage3 \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,mode=max,dest=/tmp/.buildx-cache-new" \
          --build-arg REPO=${{ github.repository }} \
          --platform linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64 \
          --output "type=image,push=false" \
          --file Dockerfile-github .

      # https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build_stage4:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage3]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage4 \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,mode=max,dest=/tmp/.buildx-cache-new" \
          --build-arg REPO=${{ github.repository }} \
          --platform linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64 \
          --output "type=image,push=false" \
          --file Dockerfile-github .

      # https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage4]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.job }}
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Log into registry
        run: echo "${{ secrets.PACKAGE_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Image
        run: |
          docker buildx build \
          --target=runtime-image \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,mode=max,dest=/tmp/.buildx-cache" \
          --build-arg REPO=${{ github.repository }} \
          --tag ${{ needs.prepare.outputs.IMAGE_ID }}:${{ needs.prepare.outputs.VERSION }} \
          --platform linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64 \
          --output "type=image,push=false" \
          --file Dockerfile-github .

      - name: Push Image
        run: |
          docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --tag ${{ needs.prepare.outputs.IMAGE_ID }}:${{ needs.prepare.outputs.VERSION }} \
          --platform linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64 \
          --output "type=image,push=true" \
          --file Dockerfile-github .

      - name: Inspect image
        if: success()
        run: |
          docker buildx imagetools inspect ${{ needs.prepare.outputs.IMAGE_ID }}:${{ needs.prepare.outputs.VERSION }}

  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: push

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.tag_image.outputs.IMAGE_ID }}:${{ steps.tag_image.outputs.VERSION }}"
          format: 'template' 
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always() 
        with:
          sarif_file: 'trivy-results.sarif'
