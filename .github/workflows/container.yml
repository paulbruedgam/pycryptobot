name: Container

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
      - beta
      - docker*

    # Publish `v1.2.3` tags as releases.
    tags:
      - '**' # All tags kick off a new container build Save history ad 5.0.x etc

  # Run tests for any PRs.
  pull_request:

env:
  BUILD_CACHE: /tmp/.buildx-cache
  BUILD_PLATFORM: linux/arm/v6,linux/arm/v7,linux/arm64,linux/amd64
  # Enable Docker Buildkit
  DOCKER_BUILDKIT: 1
  IMAGE_NAME: pycryptobot

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile-github

  prepare:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: lint
    # Map a step output to a job output
    outputs:
      DOCKER_REPOSITORY: ${{ steps.tag_image.outputs.DOCKER_REPOSITORY }}
      DOCKER_TAG: ${{ steps.tag_image.outputs.DOCKER_TAG }}

    steps:
      - uses: actions/checkout@v2

      - name: Tag Image
        id: tag_image
        run: |
          DOCKER_REPOSITORY=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          DOCKER_REPOSITORY=$(echo $DOCKER_REPOSITORY | tr '[A-Z]' '[a-z]')

          DOCKER_TAG=${{ github.ref_name }}

          # Use Docker `latest` tag convention
          [ "$DOCKER_TAG" == "main" ] && DOCKER_TAG=latest

          echo DOCKER_REPOSITORY=$DOCKER_REPOSITORY
          echo DOCKER_TAG=$DOCKER_TAG
          echo '::set-output name=DOCKER_REPOSITORY::'$DOCKER_REPOSITORY
          echo '::set-output name=DOCKER_TAG::'$DOCKER_TAG

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage1:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: prepare

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: ${BUILD_CACHE}
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage1 \
          --cache-from "type=local,src=${BUILD_CACHE}" \
          --cache-to "type=local,mode=max,dest=${BUILD_CACHE}" \
          --build-arg REPO=${{ github.repository }} \
          --platform ${BUILD_PLATFORM} \
          --output "type=image,push=false" \
          --file Dockerfile-github .

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage2:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage1]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: ${BUILD_CACHE}
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage2 \
          --cache-from "type=local,src=${BUILD_CACHE}" \
          --cache-to "type=local,mode=max,dest=${BUILD_CACHE}" \
          --build-arg REPO=${{ github.repository }} \
          --platform ${BUILD_PLATFORM} \
          --output "type=image,push=false" \
          --file Dockerfile-github .

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage3:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage2]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: ${BUILD_CACHE}
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage3 \
          --cache-from "type=local,src=${BUILD_CACHE}" \
          --cache-to "type=local,mode=max,dest=${BUILD_CACHE}" \
          --build-arg REPO=${{ github.repository }} \
          --platform ${BUILD_PLATFORM} \
          --output "type=image,push=false" \
          --file Dockerfile-github .

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build_stage4:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage3]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: ${BUILD_CACHE}
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: Build Image
        run: |
          docker buildx build \
          --target=build-stage4 \
          --cache-from "type=local,src=${BUILD_CACHE}" \
          --cache-to "type=local,mode=max,dest=${BUILD_CACHE}" \
          --build-arg REPO=${{ github.repository }} \
          --platform ${BUILD_PLATFORM} \
          --output "type=image,push=false" \
          --file Dockerfile-github .

  # Build and push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, build_stage4]

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: ${BUILD_CACHE}
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-${{ github.sha }}
            ${{ runner.os }}-buildx-${{ github.ref_name }}-${{ github.job }}-
            ${{ runner.os }}-buildx-${{ github.ref_name }}-
            ${{ runner.os }}-buildx-

      - name: Log into registry
        run: echo "${{ secrets.PACKAGE_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Image
        run: |
          docker buildx build \
          --target=runtime-image \
          --cache-from "type=local,src=${BUILD_CACHE}" \
          --cache-to "type=local,mode=max,dest=${BUILD_CACHE}-new" \
          --build-arg REPO=${{ github.repository }} \
          --tag ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ needs.prepare.outputs.DOCKER_TAG }} \
          --tag ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ github.sha }} \
          --platform ${BUILD_PLATFORM} \
          --output "type=image,push=false" \
          --file Dockerfile-github .

      # https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
      - name: Move cache
        run: |
          rm -rf ${BUILD_CACHE}
          mv ${BUILD_CACHE}-new ${BUILD_CACHE}

      - name: Push Image
        run: |
          docker buildx build \
          --cache-from "type=local,src=${BUILD_CACHE}" \
          --tag ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ needs.prepare.outputs.DOCKER_TAG }} \
          --tag ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ github.sha }} \
          --platform ${BUILD_PLATFORM} \
          --output "type=image,push=true" \
          --file Dockerfile-github .

      - name: Inspect image
        if: success()
        run: |
          docker buildx imagetools inspect ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ needs.prepare.outputs.DOCKER_TAG }}
          docker buildx imagetools inspect ${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [prepare, push]

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.PACKAGE_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ needs.prepare.outputs.DOCKER_REPOSITORY }}:${{ github.sha }}"
          format: 'template' 
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always() 
        with:
          sarif_file: 'trivy-results.sarif'
